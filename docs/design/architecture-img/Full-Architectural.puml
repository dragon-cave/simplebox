``` plantuml
@startuml

!define AWSPUML https://raw.githubusercontent.com/milo-minderbinder/AWS-PlantUML/release/18-2-22/dist

!define DEVICONS2 https://raw.githubusercontent.com/tupadr3/plantuml-icon-font-sprites/master/devicons2

!define DEVICONS https://raw.githubusercontent.com/tupadr3/plantuml-icon-font-sprites/master/devicons

  

!includeurl AWSPUML/common.puml

!includeurl AWSPUML/General/AWScloud/AWScloud.puml

!includeurl AWSPUML/General/client/client.puml

!includeurl AWSPUML/General/user/user.puml

!includeurl AWSPUML/SDKs/Python/Python.puml

!includeurl AWSPUML/Compute/AmazonEC2/AmazonEC2.puml

!includeurl AWSPUML/Compute/AmazonEC2/instance/instance.puml

!includeurl AWSPUML/Storage/AmazonS3/AmazonS3.puml

!includeurl AWSPUML/Storage/AmazonS3/bucket/bucket.puml

!includeurl AWSPUML/Database/AmazonRDS/AmazonRDS.puml

!includeurl AWSPUML/Database/AmazonRDS/DBinstance/DBinstance.puml

!includeurl AWSPUML/NetworkingContentDelivery/AmazonVPC/AmazonVPC.puml

!includeurl AWSPUML/NetworkingContentDelivery/ElasticLoadBalancing/ElasticLoadBalancing.puml

!includeurl AWSPUML/ManagementTools/AmazonCloudWatch/AmazonCloudWatch.puml

!includeurl AWSPUML/Compute/AmazonEC2/AutoScaling/AutoScaling.puml

!includeurl AWSPUML/SecurityIdentityCompliance/AWSIAM/AWSIAM.puml

  

!include DEVICONS2/django.puml

!include https://raw.githubusercontent.com/plantuml-stdlib/C4-PlantUML/master/C4_Container.puml

!include DEVICONS/react.puml

!include DEVICONS/postgresql.puml

  

skinparam componentArrowColor Black

skinparam componentBackgroundColor White

skinparam nodeBackgroundColor White

skinparam agentBackgroundColor Transparent

skinparam artifactBackgroundColor White


  
  

USER(user1, user1)

CLIENT(browser1, browser1)


  



AMAZONVPC(vpc){

ELASTICLOADBALANCING(alias){

ELASTICLOADBALANCING(loadbalance,loadbalance1)

}

AMAZONEC2(ec2){

System_Boundary(c0,"Frontend/backend"){

INSTANCE(instancia1,Client1){

Container(web_client1, "Client", "React", "Main user interaction interface", $sprite="react"){

}
Container(web_server, "Server", "Django", "Processes Client requests", $sprite="django"){

}

}
}
AUTOSCALING(autoscaling,autoscaling)

}




}

AMAZONCLOUDWATCH(cloudwatch, cloudwatch)
Container(AWSIAM, "IAM Policies", "", ""){
AWSIAM(myaccesss3,fullaccesss3)

AWSIAM(myaccessrds,fullaccessrds)
}

AMAZONS3(s3) {
BUCKET(media,multimedia data)
}

AMAZONRDS(rds){

Container(BD, "Database", "Postgres", "", $sprite="postgresql"){

DBINSTANCE(banco,Database)

}




  

user1 -> browser1

browser1 -d-> loadbalance

cloudwatch -u-> instancia1

loadbalance -d-> instancia1

AWSIAM -d-> web_server

autoscaling -left-> instancia1

web_server --> web_client1
web_client1 --> web_server

web_server-d-> media

web_server -d-> banco


@enduml
```